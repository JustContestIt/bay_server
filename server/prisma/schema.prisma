generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = env("DATABASE_URL")[0..8] == "postgresq" ? "postgresql" : "sqlite"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  LIKE
  COMMENT
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  displayName  String?
  bio          String?
  createdAt    DateTime       @default(now())

  posts        Post[]
  comments     Comment[]
  likes        Like[]
  following    Follow[]       @relation("following")
  followers    Follow[]       @relation("followers")
  notifications Notification[] @relation("notificationsForUser")
  actorNotifications Notification[] @relation("notificationsByActor")
}

model Post {
  id        Int        @id @default(autoincrement())
  authorId  Int
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime   @default(now())

  likes     Like[]
  comments  Comment[]
  notifications Notification[]
}

model Like {
  id      Int   @id @default(autoincrement())
  userId  Int
  postId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  authorId  Int
  postId    Int
  content   String
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Follow {
  id           Int  @id @default(autoincrement())
  followerId   Int
  followingId  Int
  follower     User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following    User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  actorId   Int
  postId    Int?
  type      NotificationType
  createdAt DateTime         @default(now())
  read      Boolean          @default(false)

  user     User  @relation("notificationsForUser", fields: [userId], references: [id], onDelete: Cascade)
  actor    User  @relation("notificationsByActor", fields: [actorId], references: [id], onDelete: Cascade)
  post     Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
